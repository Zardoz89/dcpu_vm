kName: Generic Keyboard (compatible)
ID: 0x30cf7406
Version: 1.2a

Interrupts do different things depending on contents of the A register:

 A |  NAME      | BEHAVIOUR
---+----------------------------------------------------------------------------
 0 | CLEAR      | Clear keyboard buffer
 1 | POP        | Store next key-code event in C register, or 0 if the buffer is
   |            | empty
 2 | IS_PRESS   | Set C register to 1 if the key code specified by the B register
   |            | is pressed, or 0 if it's not pressed.
 3 | SET-MSG    | If register B is non-zero, turn on interrupts with message B. 
   |            | If B is zero, disable interrupts
 4 | GET-STATUS | Store in C register the Status LEDs state
 5 | SET-STATUS | Reads the B register ans sets the Status LEDs state
 6 | PUSH       | Inserts B register value in the buffer, if is a valid key-code 
   |            | event.
---+----------------------------------------------------------------------------

When interrupts are enabled, the keyboard will trigger an interrupt when one or
more keys have been pressed or released.

Key-code event Format:
 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
-------------------------------------------------
  -  -  -  -  -  -  -  A  k  k  k  k  k  k  k  k

Where :
 - A (Action Bit) If the bit is at 1, this means that key is being pressed 
     (Key Down). If is 0, means that the key was released (Key Up).
 - kkkkkkkk Key code of the key pressed or released 
 - Bits 15-9 Unused. Ignored it, but can be used in future advanced keyboards.

Key codes are:
  0x10: Backspace
  0x11: Return
  0x12: Insert
  0x13: Delete
  0x1B: Escape/Break
  0x20-0x7f: ASCII characters
  0x80: Arrow up
  0x81: Arrow down
  0x82: Arrow left
  0x83: Arrow right
  0x90: Shift
  0x91: Control
  Other values: Reserved for advanced keyboards or localized keyboards

Status LEDs:
  A keyboard must have at least this LED state: Caps Locks Enable.
  Commands 4 and 5, uses the LSB bit 0 to get/set the Caps Locks Enable state 
  led.

Key code events buffer:
  The buffer can store at least 64 key code events. Each time that a key is 
  pressed or released, the appropriate key code event is pushed to the buffer.
  The buffer operates in FIFO mode, in addition if the buffer is filled, then
  the oldest key code stored is deleted.
  The commands POP and PUSH works over the buffer in LIFO mode. POP reads the 
  most old key code event stored and PUSH inserts a key code like it was the 
  oldest. So POP followed by a PUSH, can be used to inspect the last key 
  pressed/released, without changing the buffer. Also, PUSH can be used to 
  simulate keyboard typing by some programs or by the OS.


PUSH inserts here          
----------------->       
                   |---|
-----------------> |   | Oldest key code event
POP extract this   |---|
                   |   |
                   |---|
                   .   .
                   .   .
                   .   .
                   |---|
                   |   | Last key code event
                   |---|  
                         <----------------------
                           Keyboard inserts here

Shift and Upper case letters and symbols:
  The keyboard generates alone the appropriate symbol or upper case letter when 
  a key is pressed/released at same time that Shift key is being keep pressed. 

Caps Locks Mode : 
  When Caps Locks key is pressed, the keyboard enters in Caps Locks mode. The 
  next time that the Caps Lock key is pressed, then the keyboard leaves the 
  mode. In Caps Locks mode, the Caps Locks Enable status LED is set to On, and 
  when leaves this mode, is set to Off. 



Example of Use:
  A basic type program can use a ISR that uses POP command to extract key code
  events store in the keyboard buffer. If the Action Bit is On in each key
  code event, then writes in screen or stores in a string buffer if is an 
  appropriate character, if not ignores it.
  A more advanced ISR can store if Ctrl or Shift keys are being pressed, to 
  detect Ctrl+Key or Shift+Key special actions.
  



Stuff to read : 
 - http://retired.beyondlogic.org/keyboard/keybrd.htm
 - flint.cs.yale.edu/cs422/doc/art-of-asm/pdf/CH20.PDF
