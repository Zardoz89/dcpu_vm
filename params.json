{"name":"DCPU VM","tagline":"Another DCPU-16 Virtual Machine","body":"DCPU VM\r\n=======\r\nMulti-platform DCPU-16 Virtual Machine\r\n-----------------------------------\r\n\r\nNote that this VM is aimed to implement and test some of the proposed hardware devices of the <a href=\"http://trillek.org/\" target=\"_blank\">Trillek proyect</a>.\r\nIn addition, includes some extra tools.\r\n\r\n\r\nBased on <a href=\"https://bitbucket.org/benedek/dcpu-16/overview\" target=\"_blank\">Benedek Vartok VM</a>\r\n  \r\n\r\nCOMPILING\r\n---------\r\n    mkdir build\r\n    cd build\r\n    cmake ..\r\n    make\r\n    \r\nTo doing a Release build (compiling with optimizations):\r\n\r\n    cmake -DCMAKE_BUILD_TYPE=Release ..\r\n    \r\nTo doing a Debug build:\r\n\r\n    cmake -DCMAKE_BUILD_TYPE=Debug ..\r\n\r\nRun make install to copy the executable to the root of the project\r\nThis project fork is created to run perfectly on windows without boost\r\n\r\nRUN\r\n---\r\n\r\nJust type **dcpu-vm --help** to get these infos.\r\n\r\n    dcpu-vm x.x.x\r\n    usage : dcpu-vm [-options] <dcpu16-exe>\r\n    --------------------------------------------------------\r\n      options:\r\n        -assemble (-a) : assemble before load (experimental)\r\n        -debug (-d) : start in debug mode\r\n                F1  : next step\r\n                F2  : print CPU status\r\n                F3  : reset (no need debug mode)\r\n                F9  : ejects/insert floppy (no need debug mode)\r\n                System + F12 : switch debug/run\r\n        --monitor=<monitor_name> : use the following monitor\r\n                1802 -> Lem1802 (default) [c] (-1802)\r\n                1803 -> Lem1803 [c] (-1803)\r\n                cgm -> Colour Graphics Monitor (-cgm)\r\n                [c] : compatible with Lem1802 0x10c programs\r\n        -output <filename> (-o) : output assembled filename\r\n        -floppy <filename> (-fd) : floppy image file\r\n        -time (-t) : use timed emulation (else refresh based)\r\n        -vsync (-v) : use vertical synchronization\r\n                        (more accurate but may bug)\r\n\r\n\r\nThere is a debug/step mode activate/deactivate with **System+F12**:\r\n \r\n - **F1** : Single step (print the current instruction on the console)\r\n - **F2** : Print registers states into console\r\n\r\nAvaliable shortcuts alltime: \r\n\r\n - **F3** : Reset the DCPU\r\n - **F9** : Ejects/Inserts a floppy\r\n - **System+F12** : Activate/Deactivate debug mode. Note that System is Windows/Apple/Super key\r\n\r\nTODO\r\n----\r\n\r\n - <s>Finnish CGM code and create a 8x8 font</s>\r\n - Set a way of how configure what devices will be used in the machine\r\n - Several optimizations on rendering monitor loops\r\n - Rename variables/namespaces with a convention -> Apply code convention of Trillek proyect more strictly.\r\n - More options to Debug mode\r\n - DCPU manager and separated graphic rendering threads\r\n - Correct bad English :P\r\n \r\n \r\nTOOLS\r\n=====\r\n\r\nPBM2FONT\r\n--------\r\nPBM2FONT is a small tool to create LEM180x and CGM 1084 fonts. It uses a ASCII **PBM** image file to create the HEX data values that represents the font.\r\n\r\n### RUN\r\n\r\nJust type **pbm2font --help** to get these infos.\r\n\r\n    usage : pbm2font [-options] <input-file>\r\n    --------------------------------------------------------\r\n      options:\r\n        -output <filename> (-o) : output filename\r\n        -charset=<charset_type> : use the following charset type\r\n                4x8 -> Generates 4x8 font charset\r\n                8x8 -> Generates 8x8 font charset\r\n        -format=<output_format> : use the following format\r\n                dat -> Uses universal .dat output format\r\n                hex_dump -> Generates a hexadecimal dump\r\n                By defaults, the ouput format is \"dat\" and the charset is 4x8\r\n                \r\nIf isn't choosed a output file, then output to the standard out.\r\n\r\n### HOW WORKS\r\n\r\nPBM2FONT reads the PBM file, and makes a grid of 4x8, or 8x8 cells. Each cell it's converted to the appropriate format for 4x8 or 8x8 fonts. So to generate a font, you only need to use a graphics editor program that outputs ASCII PBM files (for example The Gimp), and set a grid of 4x8 or 8x8. Then you only need to draw in B&W each character and save the file. \r\n\r\n![Creating a font with The Gimp](https://raw.github.com/Zardoz89/dcpu_vm/gh-pages/images/gimp_font.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}