; Find hardware
HWN I
:iterate_hardware
SUB I, 1
HWQ I
IFE B, 0x4fd5
  IFE A, 0x24c5
    SET [fd], I    ; Mackapar floppy drive
IFE B, 0x7349
  IFE A, 0xf615
    SET [lem], I   ; LEM180X monitor
IFE B, 0x30cf
  IFE A, 0x7406
    SET [keyb], I   ; Keyboard
IFG I, 0
  SET PC, iterate_hardware

; Confg hardware
IFN [lem], 0xFFFF
  JSR conf_lem
IFN [fd], 0xFFFF
  JSR conf_fd
IFN [keyb], 0xFFFF
  JSR conf_keyb

; Write to screen
; LEM 
SET I, [lem_ram]
SET J, l_fill_pattern
JSR str_cpy

; Fills the disk with a test pattern
SET X, 0
SET Y, test_pattern ; Points to test pattern
:wait_ready
SET A, 0
HWI [fd]
IFN B, 0x0001 ; READY
  SET PC, wait_Ready

SET [test_pattern], X ; Sector number mark
SET A, 3 ; Write
HWI [fd]

IFN B, 1  
  SET PC, error  ; ERROR!

ADD X, 1
IFE X, 1440
  SET PC, test_read  ; END of DISK

SET PC, wait_ready

:test_read
SET I, [lem_ram]
SET J, l_press ; Show press key
JSR str_cpy

JSR wait_key

SET I, [lem_ram]
SET J, l_reading ; Show reading
JSR str_cpy

; Reads the disk
SET X, 0
SET Y, read_dst ; We copy to other site to compare with test pattern
:wait_ready2
SET A, 0
HWI [fd]
IFN B, 0x0001 ; READY
  SET PC, wait_ready2

SET A, 2 ; Read
HWI [fd]

IFN B, 1  
  SET PC, error  ; ERROR!

:wait_ready3 ; Waits to finish the read process
SET A, 0
HWI [fd]
IFN B, 0x0001  ; READY
  SET PC, wait_ready3

;JSR wait_key

; Call to compare pattern
SET I, read_dst
SET J, test_pattern
ADD I, 1
ADD J, 1 ; skips Sector number mark

SET C, 510
JSR cmp

ADD X, 1
IFE X, 1440
  SET PC, end  ; END of DISK
set PC, wait_ready2

:end
SET I, [lem_ram]
SET J, l_finish
JSR str_cpy
set PC, loop

:error
SET I, [lem_ram]
SET J, l_error
JSR str_cpy
set PC, loop

:loop
SET PC, loop  ;; The Real End

; ------ Functions ------------------------------------------------------------

:conf_lem
SET A, 0
SET B, [lem_ram]
HWI [lem]
SET PC, pop

:conf_fd
SET A, 1
SET X, isr_fd
HWI [fd]
SET PC, pop

:conf_keyb
SET A, 3
SET B, isr_keyb
HWI [keyb]
SET PC, pop

; I points to dst, J to source . Finish when reads a 0x0000 (NULL)
:str_cpy 
IFE 0x0000, [J]
  SET PC, pop
STI [I], [J]
SET PC, str_cpy

; I and J points to the buffers to compare. C have the lenght
:cmp
SET A, [I]
SET B, [J]
IFN A, B
  SET PC, error
IFE C, 0
  SET PC, pop
ADD I, 1
ADD J, 1
SUB C, 1
SET PC, cmp

; Wait to press any key
:wait_key
SET push, A
SET push, C

SET A, 0
HWI [keyb] ; clean buffer
:wait_key_loop
SET A, 1
HWI [keyb]
IFE C, 0
  SET PC, wait_key_loop
SET C, pop
SET A, pop
SET PC, pop

; ISRs
:isr_fd
RFI A

:isr_keyb
RFI A

; Hardware index list
:fd
dat 0xFFFF
:lem
dat 0xFFFF
:keyb
dat 0xFFFF

; Pointers to videoram
:lem_ram
dat 0x8000

; LEM TEXT
:l_fill_pattern ; Filling
dat 0x9046, 0xF069, 0xF06c, 0xF06c, 0xF069, 0xF06e, 0xF067, 0xF020, 0xF020
dat 0x0000
:l_reading      ; Reading
dat 0xB052, 0xF065, 0xF061, 0xF064, 0xF069, 0xF06e, 0xF067, 0xF020, 0xF020
dat 0x0000
:l_finish       ; Finish
dat 0xA046, 0xF069, 0xF06e, 0xF069, 0xF073, 0xF068, 0xF020, 0xF020, 0xF020
dat 0x0000
:l_press       ; Press Key
dat 0xF050, 0xF052, 0xF065, 0xF073, 0xF073, 0xF020, 0xF04B, 0xF065, 0xF079
dat 0x0000
:l_error        ; Error!!
dat 0x0445, 0x0452, 0x0452, 0x044F, 0x0452, 0x0421, 0x0421, 0xF020, 0xF020
dat 0x0000


; Test pattern
:test_pattern
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
; 64
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
; 128
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;192
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;256
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;320
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;384
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;448
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
dat 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xAAAA, 0x5555, 0xBEBE, 0xCAFE 
;512

; Were to put read data
:read_dst
dat 0
