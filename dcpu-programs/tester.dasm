; Basic DCPU compilance test

:init                                                        ; wait cycles
; set and literals
set a, 1    ;                                                   1 
set b, 2    ;                                                   1
set c, 3    ;                                                   1
set x, 4    ; X = 4                                             1
set y, 64   ; A = 0x40                                          2
set z, -1   ; Z = 0xFFFF = -1                                   1

; Add and Sub
add a, 512  ; A = 0x0201                EX=0                    3
sub a, 1    ; A = 0x0200                EX=0                    2
add j, a    ; J = 0x0200                EX=0                    2
sub j, a    ; J = 0                     EX=0                    2
sub j, z    ; J = 1 = 0 - (-1)          EX=0xFFFF               2

; Mul and Div
mul j, z    ; J = 0xFFFF = -1           EX=0                    2
set j, 10   ;                                                   1
mul j, x    ; J = 40 (0x0028)           EX=0                    2
mul y, b    ; Y = 128 (0x0080)          EX=0                    2
div a, x    ; A = 128 (0x0080)          EX=0                    3

; Mod
mod c, 2    ; C = 1                                             3

; MLI and DVI
set j, 10   ;                                                   1
mli j, z    ; J = -10 (0xFFF6)          EX=0xFFFF (check)       2
dvi j, b    ; J = -5  (0xFFFB)          EX=0xFFFF (check)       3

; Signed Mod
mdi j, 3    ; J = -2  (0xFFFE)                                  3

; AND, BOR and XOR
and z, 0xAA95 ; Z = 0xAA95                                      2
bor z, 0x00FF ; Z = 0xAAFF                                      2
and z, 0x5595 ; Z = 0x0095                                      2
xor z, 0xAA95 ; Z = 0xAA00                                      2

;Shifts
set z, 0x00F1 ;                                                 2
shr z, 4      ; Z = 0x000F              EX=0x1000               1
set z, 0xAAAA ; Z = 0xAAAA                                      2
shl z, 4      ; Z = 0xAAA0              EX=0x000A               1
set z, -128   ; Z = 0xFF80                                      2
asr z, 4      ; Z = 0xFFF8              EX=0x0000 (check)       1

; 32 bit add and sub
set a, 0x0FFF ; MSB 1                                           2
set b, 0xFF0F ; LSB 1                                           2

set x, 0x0111 ; MSB 2                                           2
set y, 0x1111 ; LSB 1                                           2
add b, y   ; add LSBs                                           2
adx a, x   ; add MSBs + EX                                      3
; B must be = 0x1020
; A must be = 0x1111

sub b, y      ;                                                 2
sbx a, x      ;                                                 3
; B must be 0xFF0F
; A must be 0x0FFF

; STI and STD test
set i, datos        ; I = 0x300                                 2
set j, datos +1     ; J = 0x301                                 2

sti [j], [i]          ; At 0x300 two times write 0xCAFE         2
sti [j + 0x100], [i]  ; At 0x402 writes 0xCAFE                  3
std [j], [datos]      ; At 0x303 writes 0xCAFE                  3

; Test of JSR and stack
set push, 0xCAFE      ; At 0xFFF writes 0xCAFE                  2
jsr subrut            ; Jumps                                   3
; Z must be 0xBEBE 
set y, pop            ; Y = 0xCAFE                              1

; Test of branchs
ifb 0x00AA, 0x0055    ;                                         5
set pc, crash

ifc 0x00AA, 0x005A    ;                                         5
set pc, crash

ife a, z              ;                                         3
set pc, crash

ifn a, a              ;                                         3
set pc, crash

ifg 1, 60000          ;                                         4
set pc, crash

ifa -128, 1           ;                                         4
set pc, crash

ifl 60000, 1          ;                                         4
set pc, crash

ifu 1, -128           ;                                         4
set pc, crash

; Chaining
ifu 1, -128           ;                                         4
ife a, a              ;                                         1
ifg 10, 1             ;                                         1
set pc, crash

; Other stuff
hwn z                 ;  C=?                                    2
:search
ifg z, 0              ;  If C=0 skips                         2 or 3
sub z, 1              ;  C--                                    2
hwq z                 ;  Get last attached hardware info        4

; Check if is a LEM
ife a, 0xf615         ;                                       3 or 4
ife b, 0x7349         ; Looks that is a LEM                   3 or 4
jsr print             ; Calls to a function                     3

ifg z, 0              ; Keep searching ?                      2 or 3
set pc, search        ; Loop                                    2

set pc, init          ; Goto 0x0000                             2

:crash
set pc, crash         ; Something was wrong if reach here

:subrut               ; Subrutine that sets z to 0xBEBE
set z, 0xBEBE         ;                                         2
set pc, pop           ; Return                                  1


.org 0x200
:str 
dat 0xA1CF            ; 'O'
dat 0xA16B            ; 'k'

:print               ; Subrutine that prints on screen
set a, 0             ; MEM_MAP_SCREEN                           1
set b, 0x8000        ;                                          2
hwi z                ;                                          4+
set a, 3             ; SET_BORDER_COLOR                         1
set b, 3             ; We try to change border color            1
hwi z                ;                                          4+

set i, str           ;                                          2
set j, 0x8000        ;                                          2

sti [j], [i]         ; copy text to screen                      1
sti [j], [i]         ; copy text to screen                      1


set pc, pop


.org 0x300
:datos dat 0xcafe

